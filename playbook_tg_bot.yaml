- name: Set up bot
  hosts: all    # playbook запустится для всех хостов в inventory.
  become: yes   # команда позволяет ansible использовать права root.
  vars_files:
    - env.yml
  tasks:        # ниже начинается список задач. Обратите внимание, tasks во множественном числе. Иначе получим ошибку при выполнении плейбука


  - name: Update apt cache
    ansible.builtin.apt:
      update_cache: yes

  - name: Install packages
    ansible.builtin.apt:
      name: ['python3', 'postgresql', 'libpq-dev', 'git']
      state: present

  - name: Check if GitHub repository is already cloned
    ansible.builtin.stat:
      path: /temp/docker/
    register: repo_status
    delegate_to: host01

  - name: Download project
    ansible.builtin.git:
      repo: 'https://github.com/rouzqq/devops_bot/tree/docker.git'
      dest: '/temp/docker'
      version: docker
    when: not repo_status.stat.exists
    delegate_to: host01

  - name: Pip install requirements
    pip:
      requirements: /temp/docker/bot/requirements.txt
    delegate_to: host01

  - name: Stop db
    ansible.builtin.systemd:
      name: postgresql
      state: stopped
    delegate_to: host01

  - name: Create MASTER_DB conf
    ansible.builtin.template:
      src: ./config-postgresql
      dest: /etc/postgresql/14/main/postgresql.conf
      owner: root
      group: root
      mode: 0644
    delegate_to: host01

  - name: Create MASTER_DB pg_hba.conf
    ansible.builtin.template:
      src: ./pg_hba.conf
      dest: /etc/postgresql/14/main/pg_hba.conf
      owner: root
      group: root
      mode: 0644
    delegate_to: host01

  - name: Create log_dir
    ansible.builtin.shell: |
       mkdir -p /temp/db_logs/
       mkdir -p /oracle
       mkdir -p /oracle/pg_data
       mkdir -p /oracle/pg_data/archive
       chown "{{ RM_USER }}" /temp/db_logs/
       chmod 0777 /temp/db_logs/
       chown "{{ DB_USER }}" /oracle/pg_data/archive
    delegate_to: host01

  - name: Start db
    ansible.builtin.systemd:
      name: postgresql
      state: started
    delegate_to: host01

  - name: Create database
    community.postgresql.postgresql_db:
      name: "{{ DB_DATABASE }}"
      state: present
    become_user: "{{ DB_USER }}"
    delegate_to: host01

  - name: Set password for the default PostgreSQL user
    command: psql -c "ALTER USER {{DB_USER}} WITH PASSWORD '{{ DB_PASSWORD }}';"
    become_user: "{{ DB_USER }}"
    delegate_to: host01

  - name: "repl_user"
    command: sudo -u {{DB_USER}} psql -c "CREATE USER {{ DB_REPL_USER }} REPLICATION LOGIN ENCRYPTED PASSWORD '{{DB_REPL_PASSWORD}}';"
    ignore_errors: true
    delegate_to: host01

  - name: "table_phone_numbers"
    become: yes
    become_user: postgres
    postgresql_table:
      table: "numbersphone"
      db: "{{ DB_DATABASE }}"
      columns:
      - id SERIAL PRIMARY KEY
      - number VARCHAR(255) NOT NULL
    delegate_to: host01
  - name: "table_emails"
    become: yes
    become_user: postgres
    postgresql_table:
      table: "emails"
      db: "{{ DB_DATABASE }}"
      columns:
      - id SERIAL PRIMARY KEY
      - email VARCHAR(255) NOT NULL
    delegate_to: host01

  - name: Stop SLAVE_DB
    ansible.builtin.systemd:
      name: postgresql
      state: stopped
    delegate_to: host02

  - name: Clear SLAVE_DB
    become_user: root
    ansible.builtin.shell: |
       rm -rf /var/lib/postgresql/14/main
       mkdir /var/lib/postgresql/14/main
       chown postgres:postgres /var/lib/postgresql/14/main
    delegate_to: host02

  - name: Replicate DB
    become_user: root
    ansible.builtin.command: pg_basebackup -D /var/lib/postgresql/14/main/ -h {{DB_HOST}} -p 5432 -U {{DB_REPL_USER}} -vP -w
    delegate_to: host02
    environment:
      PGPASSWORD: "{{DB_REPL_PASSWORD}}"

  - name: Start SLAVE_DB
    ansible.builtin.systemd:
      name: postgresql
      state: started
    delegate_to: host02

  - name: Start bot
    ansible.builtin.debug:
      msg: "bot on"
  - name: bot_up
    environment:
      TOKEN: "{{TOKEN }}"
      RM_HOST: "{{ RM_HOST }}"
      RM_PORT: "{{RM_PORT}}"
      RM_USER: "{{RM_USER}}"
      RM_PASSWORD: "{{RM_PASSWORD}}"
      DB_USER: "{{DB_USER}}"
      DB_PASSWORD: "{{DB_PASSWORD}}"
      DB_HOST: "{{DB_HOST}}"
      DB_PORT: "{{DB_PORT}}"
      DB_DATABASE: "{{DB_DATABASE}}"
    command: python3 /temp/docker/bot/bot.py
    delegate_to: host01